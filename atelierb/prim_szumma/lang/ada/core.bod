-- File core.bod
-- generated by Atelier-B/tbada on Sat May 14 03:03:14 2016
-- from input_file core.imp, checksum 3bf76bb6b26581e12f43c5ab604ed546

-- core_i
-- * Author: 
-- * Creation date: 2016.05.13.
-- 
package body core is
	
	--------------------
	-- INITIALISATION --
	--------------------
	procedure IMPORTS(this : in PTR_core) is
	begin
		-- IMPORTS Clause
		-- IMPORTS counter
		this.ref_counter := new counter.TYPE_counter ;
		counter.IMPORTS(this.ref_counter) ;
		-- IMPORTS adder
		this.ref_adder := new adder.TYPE_adder ;
		adder.IMPORTS(this.ref_adder) ;
		-- Component does not extend any machine
		null ;
		-- Instance is not initialised
		this.initialisation := FALSE ;
	end IMPORTS ;
	-- SEES BASIC_IO
	procedure SET_BASIC_IO(
		this : in PTR_core ;
		new_BASIC_IO : BASIC_IO.PTR_BASIC_IO) is
	begin
		this.ref_BASIC_IO := new_BASIC_IO ;
	end SET_BASIC_IO ;
	procedure INITIALISATION(this : in PTR_core) is
	begin
		if (this.initialisation = TRUE)
		then
			return ;
		end if ;
		this.initialisation := TRUE ;
		-- Initialisation of imported machines
		counter.INITIALISATION(this.ref_counter) ;
		adder.INITIALISATION(this.ref_adder) ;
		-- Initialisation of seen machines
		BASIC_IO.INITIALISATION(this.ref_BASIC_IO) ;
		-- INITIALISATION clause
		this.#core#tomb := (1 .. 10 => 1) ;
		this.#core#darab := 0 ;
		this.#core#osszeg := 0 ;
	end INITIALISATION ;
	----------------
	-- OPERATIONS --
	----------------
	procedure #core#beir(this : in PTR_core) is
		#core#beir#2#ii : INTEGER ;
		#core#beir#2#elem : INTEGER ;
	begin
		#core#beir#2#ii := 1 ;
		--elem := 1;
		while (#core#beir#2#ii <= 10) loop
			BASIC_IO.#basic_io#INTERVAL_READ(
				this.ref_BASIC_IO,
				1,
				100,
				#core#beir#2#elem) ;
			this.#core#tomb(#core#beir#2#ii) := #core#beir#2#elem ;
			#core#beir#2#ii := #core#beir#2#ii + 1 ;
		end loop ;
	end #core#beir ;
	
	procedure #core#muvelet(this : in PTR_core) is
	begin
		counter.#counter#f_megszamol(
			this.ref_counter,
			this.#core#tomb,
			this.#core#darab) ;
		adder.#adder#f_osszead(
			this.ref_adder,
			this.#core#tomb,
			this.#core#osszeg) ;
	end #core#muvelet ;
	
	procedure #core#kiir(this : in PTR_core) is
	begin
		BASIC_IO.#basic_io#INT_WRITE(this.ref_BASIC_IO, this.#core#darab) ;
		BASIC_IO.#basic_io#STRING_WRITE(this.ref_BASIC_IO, " db paratlan szam van a tombben\n") ;
		BASIC_IO.#basic_io#STRING_WRITE(this.ref_BASIC_IO, "Ezek osszege: ") ;
		BASIC_IO.#basic_io#INT_WRITE(this.ref_BASIC_IO, this.#core#osszeg) ;
		BASIC_IO.#basic_io#STRING_WRITE(this.ref_BASIC_IO, "\n") ;
	end #core#kiir ;
	
	-- Access methods
	function #core#operations#0#get_tomb(this : in PTR_core) return
		#core#sets#T_1 is
	begin
		return this.#core#tomb ;
	end #core#operations#0#get_tomb ;
	procedure #core#operations#0#set_tomb(
		this : in PTR_core ;
		value : #core#sets#T_1) is
	begin
		this.#core#tomb := value ;
	end #core#operations#0#set_tomb ;
	
	function #core#operations#0#get_darab(this : in PTR_core) return INTEGER is
	begin
		return this.#core#darab ;
	end #core#operations#0#get_darab ;
	procedure #core#operations#0#set_darab(
		this : in PTR_core ;
		value : INTEGER) is
	begin
		this.#core#darab := value ;
	end #core#operations#0#set_darab ;
	
	function #core#operations#0#get_osszeg(this : in PTR_core) return INTEGER is
	begin
		return this.#core#osszeg ;
	end #core#operations#0#get_osszeg ;
	procedure #core#operations#0#set_osszeg(
		this : in PTR_core ;
		value : INTEGER) is
	begin
		this.#core#osszeg := value ;
	end #core#operations#0#set_osszeg ;
	
end core ;
