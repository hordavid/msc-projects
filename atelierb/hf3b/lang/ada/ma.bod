-- File ma.bod
-- generated by Atelier-B/tbada on Tue Apr 17 17:43:32 2018
-- from input_file ma.imp, checksum 425c95290a5ed3dd5d832594a929f60a
-- WARNING : this component has not been fully proved
-- THERE ARE THEREFORE NO GUARANTEES ABOUT THIS FILE

-- ma_i;
-- * Creation date: 2016.03.18.
-- 
package body ma is
	
	--------------------
	-- INITIALISATION --
	--------------------
	procedure IMPORTS(this : in PTR_ma) is
	begin
		-- Component does not import any machine
		null ;
		-- Component does not extend any machine
		null ;
		-- Instance is not initialised
		this.initialisation := FALSE ;
	end IMPORTS ;
	-- SEES BASIC_IO
	procedure SET_BASIC_IO(
		this : in PTR_ma ;
		new_BASIC_IO : BASIC_IO.PTR_BASIC_IO) is
	begin
		this.ref_BASIC_IO := new_BASIC_IO ;
	end SET_BASIC_IO ;
	procedure INITIALISATION(this : in PTR_ma) is
	begin
		if (this.initialisation = TRUE)
		then
			return ;
		end if ;
		this.initialisation := TRUE ;
		-- Initialisation of seen machines
		BASIC_IO.INITIALISATION(this.ref_BASIC_IO) ;
		-- INITIALISATION clause
		this.#ma#via1c := FALSE ;
		this.#ma#vib1c := FALSE ;
		this.#ma#tac := (1 .. 5 => FALSE) ;
		this.#ma#tbc := (1 .. 5 => FALSE) ;
		this.#ma#tmc := (1 .. 5 => FALSE) ;
		this.#ma#vm := FALSE ;
		this.#ma#viu1 := FALSE ;
		this.#ma#tuc := (1 .. 5 => 0) ;
	end INITIALISATION ;
	----------------
	-- OPERATIONS --
	----------------
	procedure #ma#init(this : in PTR_ma) is
	begin
		this.#ma#viu1 := FALSE ;
		this.#ma#via1c := FALSE ;
		this.#ma#vib1c := FALSE ;
		this.#ma#vm := FALSE ;
	end #ma#init ;
	
	procedure #ma#mbe(this : in PTR_ma) is
		#ma#mbe#2#ii : INTEGER ;
		#ma#mbe#2#tt : INTEGER ;
	begin
		--        be
		#ma#mbe#2#ii := 1 ;
		#ma#mbe#2#tt := 0 ;
		while (#ma#mbe#2#ii <= 5) loop
			BASIC_IO.#basic_io#INTERVAL_READ(
				this.ref_BASIC_IO,
				MININT,
				MAXINT,
				#ma#mbe#2#tt) ;
			this.#ma#tuc(#ma#mbe#2#ii) := #ma#mbe#2#tt ;
			#ma#mbe#2#ii := #ma#mbe#2#ii + 1 ;
		end loop ;
		this.#ma#viu1 := TRUE ;
	end #ma#mbe ;
	
	procedure #ma#mtrb(this : in PTR_ma) is
		#ma#mtrb#2#ii : INTEGER ;
		#ma#mtrb#2#dd : INTEGER ;
	begin
		#ma#mtrb#2#ii := 1 ;
		while (#ma#mtrb#2#ii <= 5) loop
			#ma#mtrb#2#dd := this.#ma#tuc(#ma#mtrb#2#ii) ;
			if (#ma#mtrb#2#dd < 0)
			then
				this.#ma#tbc(#ma#mtrb#2#ii) := TRUE ;
			else
				this.#ma#tbc(#ma#mtrb#2#ii) := FALSE ;
			end if ;
			#ma#mtrb#2#ii := #ma#mtrb#2#ii + 1 ;
		end loop ;
		this.#ma#vib1c := TRUE ;
	end #ma#mtrb ;
	
	procedure #ma#mtra(this : in PTR_ma) is
		#ma#mtra#2#ii : INTEGER ;
		#ma#mtra#2#dd : INTEGER ;
	begin
		#ma#mtra#2#ii := 1 ;
		while (#ma#mtra#2#ii <= 5) loop
			#ma#mtra#2#dd := this.#ma#tuc(#ma#mtra#2#ii) ;
			if (#ma#mtra#2#dd > 0)
			then
				this.#ma#tac(#ma#mtra#2#ii) := TRUE ;
			else
				this.#ma#tac(#ma#mtra#2#ii) := FALSE ;
			end if ;
			#ma#mtra#2#ii := #ma#mtra#2#ii + 1 ;
		end loop ;
		this.#ma#via1c := TRUE ;
	end #ma#mtra ;
	
	procedure #ma#opm(this : in PTR_ma) is
		#ma#opm#2#ii : INTEGER ;
		#ma#opm#2#dd : BOOLEAN ;
		#ma#opm#2#cc : BOOLEAN ;
	begin
		#ma#opm#2#ii := 1 ;
		while (#ma#opm#2#ii <= 5) loop
			#ma#opm#2#dd := this.#ma#tac(#ma#opm#2#ii) ;
			#ma#opm#2#cc := this.#ma#tbc(#ma#opm#2#ii) ;
			if ((#ma#opm#2#dd /= TRUE) and then (#ma#opm#2#cc /= TRUE))
			then
				this.#ma#tmc(#ma#opm#2#ii) := TRUE ;
			else
				this.#ma#tmc(#ma#opm#2#ii) := FALSE ;
			end if ;
			#ma#opm#2#ii := #ma#opm#2#ii + 1 ;
		end loop ;
		this.#ma#vm := TRUE ;
	end #ma#opm ;
	
	procedure #ma#ki(this : in PTR_ma) is
	begin
		BASIC_IO.#basic_io#BOOL_WRITE(this.ref_BASIC_IO, this.#ma#vm) ;
		BASIC_IO.#basic_io#STRING_WRITE(this.ref_BASIC_IO, " ") ;
		BASIC_IO.#basic_io#BOOL_WRITE(this.ref_BASIC_IO, this.#ma#via1c) ;
		BASIC_IO.#basic_io#STRING_WRITE(this.ref_BASIC_IO, " ") ;
		BASIC_IO.#basic_io#BOOL_WRITE(this.ref_BASIC_IO, this.#ma#vib1c) ;
		BASIC_IO.#basic_io#STRING_WRITE(this.ref_BASIC_IO, " ") ;
		BASIC_IO.#basic_io#BOOL_WRITE(this.ref_BASIC_IO, this.#ma#viu1) ;
		BASIC_IO.#basic_io#STRING_WRITE(this.ref_BASIC_IO, " ") ;
		BASIC_IO.#basic_io#STRING_WRITE(this.ref_BASIC_IO, "\n") ;
	end #ma#ki ;
	
	-- Access methods
	function #ma#operations#0#get_viu1(this : in PTR_ma) return BOOLEAN is
	begin
		return this.#ma#viu1 ;
	end #ma#operations#0#get_viu1 ;
	procedure #ma#operations#0#set_viu1(this : in PTR_ma ; value : BOOLEAN) is
	begin
		this.#ma#viu1 := value ;
	end #ma#operations#0#set_viu1 ;
	
end ma ;
